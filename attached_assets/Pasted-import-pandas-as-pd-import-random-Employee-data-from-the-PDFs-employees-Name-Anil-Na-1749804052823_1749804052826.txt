import pandas as pd
import random

# Employee data from the PDFs
employees = [
    {"Name": "Anil Nair", "Age": 37, "Gender": "Male", "Region": "South", "Job Role": "Product Manager", "Experience": 4},
    {"Name": "Priya Sen", "Age": 30, "Gender": "Female", "Region": "East", "Job Role": "Product Manager", "Experience": 6},
    {"Name": "Sourav Das", "Age": 47, "Gender": "Female", "Region": "East", "Job Role": "Sales Executive", "Experience": 15},
    {"Name": "Abhishek Dutta", "Age": 30, "Gender": "Male", "Region": "East", "Job Role": "Sales Executive", "Experience": 2},
    {"Name": "Divya Bhalla", "Age": 32, "Gender": "Female", "Region": "North", "Job Role": "HR Manager", "Experience": 8},
    {"Name": "Rohit Thakur", "Age": 44, "Gender": "Male", "Region": "North", "Job Role": "HR Manager", "Experience": 6},
    {"Name": "Karthik Raj", "Age": 50, "Gender": "Male", "Region": "South", "Job Role": "Cybersecurity Specialist", "Experience": 25},
    {"Name": "Sourav Das", "Age": 30, "Gender": "Female", "Region": "East", "Job Role": "Cybersecurity Specialist", "Experience": 6},
    {"Name": "Rahul Mehta", "Age": 32, "Gender": "Female", "Region": "West", "Job Role": "Data Analyst", "Experience": 3},
    {"Name": "Sneha Desai", "Age": 31, "Gender": "Female", "Region": "West", "Job Role": "Data Analyst", "Experience": 3}
]

def generate_health_data(employee):
    age = employee["Age"]
    job_role = employee["Job Role"]
    
    # Physical health metrics
    bmi = round(random.uniform(18.5, 32.5), 1)
    if bmi > 30:
        bmi_status = "Obese"
    elif bmi > 25:
        bmi_status = "Overweight"
    elif bmi > 18.5:
        bmi_status = "Normal"
    else:
        bmi_status = "Underweight"
    
    blood_pressure = f"{random.randint(100, 140)}/{random.randint(60, 90)}"
    if int(blood_pressure.split('/')[0]) > 130 or int(blood_pressure.split('/')[1]) > 85:
        bp_status = "Elevated"
    else:
        bp_status = "Normal"
    
    steps_avg = random.randint(3000, 12000)
    sleep_avg = round(random.uniform(5.5, 8.5), 1)
    
    # Mental health metrics
    stress_level = random.randint(1, 10)
    if stress_level > 7:
        stress_status = "High"
    elif stress_level > 4:
        stress_status = "Moderate"
    else:
        stress_status = "Low"
    
    mood_score = random.randint(3, 10)
    if mood_score > 7:
        mood_status = "Positive"
    elif mood_score > 5:
        mood_status = "Neutral"
    else:
        mood_status = "Negative"
    
    # Generate recommendations
    recommendations = []
    
    # Job-specific recommendations
    if "Product Manager" in job_role:
        recommendations.append("Practice mindfulness techniques to manage cross-functional team stress")
        recommendations.append("Schedule regular breaks from screen time to reduce eye strain")
    elif "Sales Executive" in job_role:
        recommendations.append("Consider voice care exercises to maintain vocal health with frequent client calls")
        recommendations.append("Stretch regularly to counteract long hours of travel/standing")
    elif "HR Manager" in job_role:
        recommendations.append("Engage in stress-relief activities to manage employee relations workload")
        recommendations.append("Practice active listening techniques to reduce emotional fatigue")
    elif "Cybersecurity Specialist" in job_role:
        recommendations.append("Follow the 20-20-20 rule (every 20 minutes, look at something 20 feet away for 20 seconds)")
        recommendations.append("Consider blue light filtering glasses for prolonged screen exposure")
    elif "Data Analyst" in job_role:
        recommendations.append("Take micro-breaks every hour to prevent repetitive strain injuries")
        recommendations.append("Try desk exercises to improve circulation during long analysis sessions")
    
    # Age-specific recommendations
    if age > 40:
        recommendations.append("Consider annual comprehensive health checkups")
        recommendations.append("Focus on joint mobility exercises")
    elif age > 30:
        recommendations.append("Schedule preventive health screenings")
        recommendations.append("Maintain work-life balance to prevent burnout")
    
    # BMI-specific recommendations
    if bmi_status in ["Overweight", "Obese"]:
        recommendations.append("Consult with a nutritionist for personalized diet advice")
        recommendations.append("Incorporate 30 minutes of moderate exercise daily")
    elif bmi_status == "Underweight":
        recommendations.append("Consult with a nutritionist to ensure adequate calorie intake")
    
    # Stress-specific recommendations
    if stress_status == "High":
        recommendations.append("Practice deep breathing exercises for 5 minutes daily")
        recommendations.append("Consider speaking with a counselor about stress management")
    
    return {
        "BMI": bmi,
        "BMI Status": bmi_status,
        "Blood Pressure": blood_pressure,
        "BP Status": bp_status,
        "Avg Daily Steps": steps_avg,
        "Avg Sleep (hrs)": sleep_avg,
        "Stress Level": stress_level,
        "Stress Status": stress_status,
        "Mood Score": mood_score,
        "Mood Status": mood_status,
        "Recommendations": recommendations
    }

# Generate health data for all employees
for emp in employees:
    emp.update(generate_health_data(emp))

# Display functions
def display_overview():
    print("\n=== OVERALL EMPLOYEE HEALTH STATISTICS ===")
    df = pd.DataFrame(employees)
    health_df = df[["Name", "Age", "Job Role", "BMI Status", "BP Status", "Stress Status", "Mood Status"]]
    
    # Calculate metrics
    normal_bmi = len(health_df[health_df['BMI Status'] == 'Normal'])
    normal_bp = len(health_df[health_df['BP Status'] == 'Normal'])
    low_stress = len(health_df[health_df['Stress Status'] == 'Low'])
    
    print(f"\nEmployees with Normal BMI: {normal_bmi}/{len(health_df)}")
    print(f"Employees with Normal BP: {normal_bp}/{len(health_df)}")
    print(f"Employees with Low Stress: {low_stress}/{len(health_df)}")
    
    print("\nDetailed Health Status:")
    print(health_df.to_string(index=False))

def display_employee_details(emp):
    print(f"\n=== HEALTH DETAILS FOR {emp['Name'].upper()} ===")
    print(f"\nAge: {emp['Age']}")
    print(f"Job Role: {emp['Job Role']}")
    
    print("\nPHYSICAL HEALTH:")
    print(f"BMI: {emp['BMI']} ({emp['BMI Status']})")
    print(f"Blood Pressure: {emp['Blood Pressure']} ({emp['BP Status']})")
    print(f"Average Daily Steps: {emp['Avg Daily Steps']}")
    print(f"Average Sleep: {emp['Avg Sleep (hrs)']} hours")
    
    print("\nMENTAL HEALTH:")
    print(f"Stress Level: {emp['Stress Level']}/10 ({emp['Stress Status']})")
    print(f"Mood Score: {emp['Mood Score']}/10 ({emp['Mood Status']})")
    
    print("\nPERSONALIZED RECOMMENDATIONS:")
    for rec in emp["Recommendations"]:
        print(f"- {rec}")
    
    # Additional specific recommendations
    if emp["Job Role"] in ["Cybersecurity Specialist", "Data Analyst"]:
        print("- Given your screen-intensive role, consider an annual eye examination")
    if emp["Age"] > 40 and "Sales Executive" in emp["Job Role"]:
        print("- Consider ergonomic assessment for your work travel setup")

# Main program
def main():
    while True:
        print("\nHR MANAGEMENT APP - HEALTH TRACKING")
        print("1. View Overall Health Statistics")
        print("2. Search Employee Health Details")
        print("3. Exit")
        
        choice = input("Enter your choice (1-3): ")
        
        if choice == "1":
            display_overview()
        elif choice == "2":
            print("\nAvailable Employees:")
            for i, emp in enumerate(employees, 1):
                print(f"{i}. {emp['Name']} ({emp['Job Role']})")
            
            try:
                emp_num = int(input("Enter employee number: "))
                if 1 <= emp_num <= len(employees):
                    display_employee_details(employees[emp_num-1])
                else:
                    print("Invalid employee number")
            except ValueError:
                print("Please enter a valid number")
        elif choice == "3":
            print("Exiting program...")
            break
        else:
            print("Invalid choice, please try again")

if name == "main":
    main()